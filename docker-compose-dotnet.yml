# Note in Kubernetes wait4sql image, wait-tool volume and entrypoint override is not needed. This is just to overcome docker-compose
# limitation when dependent services start immediately, not waiting till sql database is fully ready.
---

version: "3.5"
services:

    nsiws-design:
        image: siscc/sdmxri-nsi-maapi:${DOTNET_RELEASE_TAG}
        container_name: nsiws-design
        ports:
          - "${NSI_DESIGN_PORT}:80"
        environment:
            # Authentication configuration
            auth__enabled: ${AUTH_ENABLED}
            auth__allowAnonymous: "false"
            auth__authority: https://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}
            auth__clientId: ${KEYCLOAK_CLIENT_ID}
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            auth__showPii: "true"
            # Authorization configuration
            mappingStore__Id__Default: "design" #Dataspace id
            DotStatSuiteCoreCommonDbConnectionString: Server=${COMMON_DB_SERVER};Database=${COMMON_DB};User=${COMMON_DB_RO_USER};Password=${COMMON_DB_RO_PWD};
            # Database configuration
            SQL_SERVER: ${STRUCT_DB_DESIGN_SERVER}
            SQL_DATABASE: ${STRUCT_DB_DESIGN}
            SQL_USER: ${STRUCT_DB_DESIGN_USER}
            SQL_PASSWORD: ${STRUCT_DB_DESIGN_PWD}
            # Dissemination database configuration
            disseminationDbConnection__dbType: SqlServer
            disseminationDbConnection__connectionString: Server=${DATA_DB_DESIGN_SERVER};Database=${DATA_DB_DESIGN};User=${DATA_DB_DESIGN_USER};Password=${DATA_DB_DESIGN_PWD};
            # MAAPI.NET configuration
            MA_SQL_USER: ${DB_SA_USER}
            MA_SQL_PASSWORD: ${DB_SA_PASSWORD}
            MA_ALWAYS_RESET: N
            # Other NSI WS configuration
            INSERT_NEW_ITEM_SCHEME_VALUES: "true"
            SENDER_ID: "design - DotStat v8"
            enableReleaseManagement: "true"
            TZ: ${TZ}
        depends_on:
          dbup-struct-design:
            condition: service_completed_successfully
        volumes:
          - "./logs:/app/logs"
        networks:
          - dotstat_network

    nsiws-release:
        image: siscc/sdmxri-nsi-maapi:${DOTNET_RELEASE_TAG}
        container_name: nsiws-release
        ports:
          - "${NSI_RELEASE_PORT}:80"
        environment:
            # Authentication configuration
            auth__enabled: ${AUTH_ENABLED}
            auth__allowAnonymous: "true"
            auth__authority: https://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}
            auth__clientId: ${KEYCLOAK_CLIENT_ID}
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            auth__showPii: "true"
            # Authorization configuration
            mappingStore__Id__Default: "release" #Dataspace id
            DotStatSuiteCoreCommonDbConnectionString: Server=${COMMON_DB_SERVER};Database=${COMMON_DB};User=${COMMON_DB_RO_USER};Password=${COMMON_DB_RO_PWD};
            # Database configuration
            SQL_SERVER: ${STRUCT_DB_RELEASE_SERVER}
            SQL_DATABASE: ${STRUCT_DB_RELEASE}
            SQL_USER: ${STRUCT_DB_RELEASE_USER}
            SQL_PASSWORD: ${STRUCT_DB_RELEASE_PWD}
            # Dissemination database configuration
            disseminationDbConnection__dbType: SqlServer
            disseminationDbConnection__connectionString: Server=${DATA_DB_RELEASE_SERVER};Database=${DATA_DB_RELEASE};User=${DATA_DB_RELEASE_USER};Password=${DATA_DB_RELEASE_PWD};
            # MAAPI.NET configuration
            MA_SQL_USER: ${DB_SA_USER}
            MA_SQL_PASSWORD: ${DB_SA_PASSWORD}
            MA_ALWAYS_RESET: N
            # Other NSI WS configuration
            INSERT_NEW_ITEM_SCHEME_VALUES: "false"
            SENDER_ID: "release - DotStat v8"
            enableReleaseManagement: "true"
            TZ: ${TZ}
        depends_on:
          dbup-struct-release:
            condition: service_completed_successfully
        volumes:
          - "./logs:/app/logs"
        networks:
          - dotstat_network

    transfer-service:
        image: siscc/dotstatsuite-core-transfer:${DOTNET_RELEASE_TAG}
        container_name: transfer-service
        environment:
            auth__Enabled: ${AUTH_ENABLED}
            auth__authority: https://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}
            auth__clientId: ${KEYCLOAK_CLIENT_ID}
            auth__authorizationUrl: https://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}/protocol/openid-connect/auth
            auth__scopes__0: openid
            auth__scopes__1: profile
            auth__scopes__2: email
            auth__claimsMapping__email: email
            auth__claimsMapping__groups: groups
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            MaxTransferErrorAmount: 0
            DefaultLanguageCode: en
            SmtpHost: ${SMTP_HOST}
            SmtpPort: ${SMTP_PORT}
            SmtpEnableSsl: ${SMTP_TLS}
            SmtpUserName: ${SMTP_USER}
            SmtpUserPassword: ${SMTP_PASSWORD}
            MailFrom: noreply@dlm.org
            MaxTextAttributeLength: 150
            DotStatSuiteCoreCommonDbConnectionString: Server=${COMMON_DB_SERVER};Database=${COMMON_DB};User=${COMMON_DB_RO_USER};Password=${COMMON_DB_RO_PWD};
            SpacesInternal__0__Id: design
            SpacesInternal__0__DotStatSuiteCoreStructDbConnectionString: Server=${STRUCT_DB_DESIGN_SERVER};Database=${STRUCT_DB_DESIGN};User=${STRUCT_DB_DESIGN_USER};Password=${STRUCT_DB_DESIGN_PWD};
            SpacesInternal__0__DotStatSuiteCoreDataDbConnectionString: Server=${DATA_DB_DESIGN_SERVER};Database=${DATA_DB_DESIGN};User=${DATA_DB_DESIGN_USER};Password=${DATA_DB_DESIGN_PWD};
            SpacesInternal__0__DataImportTimeOutInMinutes: 5
            SpacesInternal__0__DatabaseCommandTimeoutInSec: 60
            SpacesInternal__0__AutoLog2DB: "true"
            SpacesInternal__0__AutoLog2DBLogLevel: "Notice"
            SpacesInternal__1__Id: release
            SpacesInternal__1__DotStatSuiteCoreStructDbConnectionString: Server=${STRUCT_DB_RELEASE_SERVER};Database=${STRUCT_DB_RELEASE};User=${STRUCT_DB_RELEASE_USER};Password=${STRUCT_DB_RELEASE_PWD};
            SpacesInternal__1__DotStatSuiteCoreDataDbConnectionString: Server=${DATA_DB_RELEASE_SERVER};Database=${DATA_DB_RELEASE};User=${DATA_DB_RELEASE_USER};Password=${DATA_DB_RELEASE_PWD};
            SpacesInternal__1__DataImportTimeOutInMinutes: 5
            SpacesInternal__1__DatabaseCommandTimeoutInSec: 60
            SpacesInternal__1__AutoLog2DB: "true"
            SpacesInternal__1__AutoLog2DBLogLevel: "Notice"
            SpacesInternal__2__Id: training
            SpacesInternal__2__DotStatSuiteCoreStructDbConnectionString: Server=${STRUCT_DB_TRAINING_SERVER};Database=${STRUCT_DB_TRAINING};User=${STRUCT_DB_TRAINING_USER};Password=${STRUCT_DB_TRAINING_PWD};
            SpacesInternal__2__DotStatSuiteCoreDataDbConnectionString: Server=${DATA_DB_TRAINING_SERVER};Database=${DATA_DB_TRAINING};User=${DATA_DB_TRAINING_USER};Password=${DATA_DB_TRAINING_PWD};
            SpacesInternal__2__DataImportTimeOutInMinutes: 5
            SpacesInternal__2__DatabaseCommandTimeoutInSec: 60
            SpacesInternal__2__AutoLog2DB: "true"
            SpacesInternal__2__AutoLog2DBLogLevel: "Notice"
            TZ: ${TZ}
            Kestrel__Limits__MaxRequestBodySize: 30000000
        volumes:
          - "./logs:/app/logs"
        ports:
          - "${TRANSFER_PORT}:80"
        depends_on:
          dbup-data-design:
            condition: service_completed_successfully
          dbup-struct-design:
            condition: service_completed_successfully
          dbup-data-release:
            condition: service_completed_successfully
          dbup-struct-release:
            condition: service_completed_successfully
          dbup-data-training:
            condition: service_completed_successfully
          dbup-struct-training:
            condition: service_completed_successfully
        networks:
          - dotstat_network

    auth-service:
        image: siscc/dotstatsuite-core-auth-management:${DOTNET_RELEASE_TAG}
        container_name: auth-service
        environment:
            auth__enabled: ${AUTH_ENABLED}
            auth__authority: https://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}
            auth__clientId: ${KEYCLOAK_CLIENT_ID}
            auth__authorizationUrl: https://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}/protocol/openid-connect/auth
            auth__scopes__0: openid
            auth__scopes__1: profile
            auth__scopes__2: email
            auth__claimsMapping__email: email
            auth__claimsMapping__groups: groups
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            DotStatSuiteCoreCommonDbConnectionString: Server=${COMMON_DB_SERVER};Database=${COMMON_DB};User=${COMMON_DB_USER};Password=${COMMON_DB_PWD};
            TZ: ${TZ}
        volumes:
          - "./logs:/app/logs"
        ports:
          - "${AUTH_PORT}:80"
        depends_on:
          dbup-common:
            condition: service_completed_successfully
        networks:
          - dotstat_network

    dbup-struct-design:
        image: siscc/dotstatsuite-dbup:${DOTNET_RELEASE_TAG}
        container_name: dbup-struct-design
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=${STRUCT_DB_DESIGN_SERVER};Database=${STRUCT_DB_DESIGN};User=${DB_SA_USER};Password=${DB_SA_PASSWORD}; --mappingStoreDb --loginName ${STRUCT_DB_DESIGN_USER} --loginPwd ${STRUCT_DB_DESIGN_PWD} --force --alterPassword
            TZ: ${TZ}
        depends_on:
          db:
            condition: service_healthy
        networks:
          - dotstat_network

    dbup-data-design:
        image: siscc/dotstatsuite-dbup:${DOTNET_RELEASE_TAG}
        container_name: dbup-data-design
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=${DATA_DB_DESIGN_SERVER};Database=${DATA_DB_DESIGN};User=${DB_SA_USER};Password=${DB_SA_PASSWORD}; --dataDb --loginName ${DATA_DB_DESIGN_USER} --loginPwd ${DATA_DB_DESIGN_PWD} --force --alterPassword
            TZ: ${TZ}
        depends_on:
          db:
            condition: service_healthy
        networks:
          - dotstat_network

    dbup-struct-release:
        image: siscc/dotstatsuite-dbup:${DOTNET_RELEASE_TAG}
        container_name: dbup-struct-release
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=${STRUCT_DB_RELEASE_SERVER};Database=${STRUCT_DB_RELEASE};User=${DB_SA_USER};Password=${DB_SA_PASSWORD}; --mappingStoreDb --loginName ${STRUCT_DB_RELEASE_USER} --loginPwd ${STRUCT_DB_RELEASE_PWD} --force --alterPassword
            TZ: ${TZ}
        depends_on:
          db:
            condition: service_healthy
        networks:
          - dotstat_network

    dbup-data-release:
        image: siscc/dotstatsuite-dbup:${DOTNET_RELEASE_TAG}
        container_name: dbup-data-release
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=${DATA_DB_RELEASE_SERVER};Database=${DATA_DB_RELEASE};User=${DB_SA_USER};Password=${DB_SA_PASSWORD}; --dataDb --loginName ${DATA_DB_RELEASE_USER} --loginPwd ${DATA_DB_RELEASE_PWD} --force --alterPassword
            TZ: ${TZ}
        depends_on:
          db:
            condition: service_healthy
        networks:
          - dotstat_network

    dbup-common:
        image: siscc/dotstatsuite-dbup:${DOTNET_RELEASE_TAG}
        container_name: dbup-common
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=${COMMON_DB_SERVER};Database=${COMMON_DB};User=${DB_SA_USER};Password=${DB_SA_PASSWORD}; --commonDb --loginName ${COMMON_DB_USER} --loginPwd ${COMMON_DB_PWD} --force --alterPassword --ROloginName ${COMMON_DB_RO_USER} --ROloginPwd ${COMMON_DB_RO_PWD}
            TZ: ${TZ}
        depends_on:
          db:
            condition: service_healthy
        networks:
          - dotstat_network

    db:
        image: mcr.microsoft.com/mssql/server:${MSSQL_IMAGE}
        container_name: mssql
        ports:
          - "${SQL_PORT}:1433"
        environment:
          - SA_PASSWORD=${DB_SA_PASSWORD}
          - MSSQL_PID=Developer
          - ACCEPT_EULA=Y
        healthcheck:
          test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_SA_PASSWORD} -Q "SELECT 1" -b -o /dev/null
          interval: 10s
          timeout: 3s
          retries: 10
          start_period: 10s
        volumes:
          - "./persistent-data/mssql:/var/opt/mssql/data"
          - "/etc/timezone:/etc/timezone:ro"
          - "/etc/localtime:/etc/localtime:ro"
        networks:
          - dotstat_network

networks:
  dotstat_network:
    name: dotstat_common_network
